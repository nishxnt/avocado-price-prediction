# -*- coding: utf-8 -*-
"""Avocado Price Prediction Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fEoU913PK4Dj2CGuh8V2ZyykXSwUMKT7

#Avocado Dataset
Average price prediction using **linear regression and random forest regressor**. The goal is to **predict average price of avocado** using best regression model.

The dataset is made up of details regarding HASS Avocado. Historical information on avocado sales and prices in different US markets is given.

##Importing Dependencies
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
sns.set()

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

from subprocess import check_output
from sklearn import metrics

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

"""##Loading the dataset"""

avocado = pd.read_csv('/content/avocado.csv')
avocado.head()

"""Columns and their descriptions:
1. Unnamed: SNo.
2. Date: The date of the observation
3. AveragePrice: the average price of single avocado
4. Total Volume: Total number of avocados sold
5. 4046: Total number of avocados with PLU 4046 sold
6. 4225: Total number of avocados with PLU 4225 sold
7. 4770: Total number of avocados with PLU 4770 sold
8. Total Bags: Total number of bags sold
9. Small Bags: Total number of small bags sold
10. Large Bags: Total number of large bags sold
11. XLarge Bags: Total number of xlarge bags sold
12. type: Organic or Conventional
13. year: The year of observation
14. region: the city or region of the observation

##Preprocessing the Data


*   Creating dummy variables for type varibale
*   Use label encoder for region column to convert it into numerical data
*   Dropping the column Unnamed as it has only index values
*   Renaming column 4046,4225,4770 for better understanding
"""

avocado.shape

avocado.info()

"""There are no missing values in the dataset"""

avocado.describe()

"""The average price of avocado is 1.405 and minimum is 0.44 and maximum is 3.25"""

avocado.columns

avocado.drop('Unnamed: 0', axis=1, inplace=True)

# dropping the column as it only contains index

avocado.rename(columns={'4046':'Small HASS sold',
                        '4225':'Large HASS sold',
                        '4770':'XLarge HASS sold'},
               inplace=True)

avocado.columns

avocado.type.unique()

avocado = pd.get_dummies(avocado, columns=['type'], drop_first=True)
avocado.head()

# creating dummy variables for type column

print('Organice', avocado[avocado['type_organic']==1]['Date'].count())
print('Conventional', avocado[avocado['type_organic']==0]['Date'].count())

# Establishing correlation between all the features using heatmap

sns.heatmap(avocado.corr())

"""Average Price has more correlation with type of avocado and then with year compared to others."""

# Label encoding 'region' column to convert to numerical data

le = LabelEncoder()
avocado['region'] = le.fit_transform(avocado['region'])
avocado.head()

avocado.region.unique()

sns.heatmap(avocado.corr())

"""Now we could see some mild correlation with Average price and region

##Data Exploration

###Spread of Average Price in the data
"""

sns.distplot(avocado['AveragePrice'], axlabel='Distribution of average price')

"""Most average prices lies in range from 1.0 to 1.7

###Types of avocado vs average price
"""

sns.boxplot(x='type_organic', y='AveragePrice', data=avocado)

"""Organic avocados are more expensive than conventional ones

###How average price varies over years
"""

sns.boxplot(x='year', y='AveragePrice', data=avocado)

"""We notice the average price was high in 2017 compared to other years

###How average price varies across regions
"""

avocado.groupby('region')['AveragePrice'].sum().sort_values(ascending=False).plot(kind='bar', figsize=(15,5))

"""AveragePrice varies with region. Price of avocado varies from one region to another-with HartfordSpringfield being highest and Houston being lowest price to get cheap Avocado.

##Predicting Average Price of Avocado

###Model 1: Using Linear Regression
"""

# Creating a new dataframe with few columns only and create train and test data
avocado_new = avocado[['AveragePrice', 'Total Volume', 'Small HASS sold', 'Large HASS sold', 'XLarge HASS sold',
                       'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags', 'type_organic', 'year', 'region']]

X = avocado_new[['AveragePrice', 'Total Volume', 'Small HASS sold', 'Large HASS sold', 'XLarge HASS sold',
                 'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags', 'type_organic', 'year', 'region']] # feature columns
y = avocado_new.type_organic # predictor variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)

print('X Train Shape: ',X_train.shape)
print('y Train Shape: ',y_train.shape)

print('X Test Shape: ',X_test.shape)
print('y Test Shape: ',y_test.shape)

scaler = StandardScaler().fit(avocado_new)
avocado_new_std = scaler.transform(avocado_new)
avocado_new = pd.DataFrame(avocado_new_std)
avocado_new.columns = ['AveragePrice', 'Total Volume', 'Small HASS sold', 'Large HASS sold', 'XLarge HASS sold',
                       'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags', 'type_organic', 'year', 'region']

avocado_new.head()

feature_cols = ['AveragePrice', 'Total Volume', 'Small HASS sold', 'Large HASS sold', 'XLarge HASS sold', 
                'Total Bags', 'Small Bags', 'Large Bags', 'XLarge Bags', 'type_organic', 'year', 'region']
X = avocado_new[feature_cols]
y = avocado_new.AveragePrice

def split(X,y):
  return train_test_split(X, y, test_size=0.20, random_state=1)

X_train, X_test, y_train, y_test=split(X,y)

print('X_train shape: ',X_train.shape)
print('y_train shape: ',y_train.shape)

print('X_test shape: ',X_test.shape)
print('y_test shape: ',y_test.shape)

linreg1 = LinearRegression()
linreg1.fit(X_train, y_train)

feature_cols.insert(0,'Intercept')
coef = linreg1.coef_.tolist()
coef.insert(0, linreg1.intercept_)
eq1 = zip(feature_cols, coef)

for c1, c2 in eq1:
  print(c1,c2)

y_pred_train = linreg1.predict(X_train)
y_pred_test = linreg1.predict(X_test)

"""### Model Evaluation for Linear Regression Model 1"""

print('Model Evaluation for Linear Regression Model 1')

RMSE_train = np.sqrt(metrics.mean_squared_error(y_train, y_pred_train))
RMSE_test = np.sqrt(metrics.mean_squared_error(y_test, y_pred_test))
print(f'RMSE for training set is {RMSE_train} and RMSE for test set is {RMSE_test}')

yhat = linreg1.predict(X_train)
SS_Residual = sum((y_train-yhat)**2)
SS_Total = sum((y_train-np.mean(y_train))**2)
r_squared = 1 - (float(SS_Residual))/SS_Total
adjusted_r_squared = 1 - (1-r_squared)*(len(y_train)-1)/(len(y_train)-X_train.shape[1]-1)
print('r_squared for train data: ',r_squared, 'and adjusted_r_squared for train data: ',adjusted_r_squared)

yhat = linreg1.predict(X_test)
SS_Residual = sum((y_test-yhat)**2)
SS_Total = sum((y_test-np.mean(y_test))**2)
r_squared = 1 - (float(SS_Residual))/SS_Total
adjusted_r_squared = 1 - (1-r_squared)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)
print('r_squared for test data: ',r_squared, 'and adjusted_r_squared for test data: ',adjusted_r_squared)

"""###Model 2: Random Forest Regressor"""

model2 = RandomForestRegressor(random_state=0)
model2.fit(X_train, y_train)
y_pred_train_2 = model2.predict(X_train)
y_pred_test_2 = model2.predict(X_test)

"""###Model Evaluation for Random Forest Regressor"""

print('Model Evaluation for Random Forest Regressor Model 2')

RMSE_train = np.sqrt(metrics.mean_squared_error(y_train, y_pred_train_2))
RMSE_test = np.sqrt(metrics.mean_squared_error(y_test, y_pred_test_2))
print(f'RMSE for training set is {RMSE_train} and RMSE for test set is {RMSE_test}')

yhat = linreg1.predict(X_train)
SS_Residual = sum((y_train-yhat)**2)
SS_Total = sum((y_train-np.mean(y_train))**2)
r_squared = 1 - (float(SS_Residual))/SS_Total
adjusted_r_squared = 1 - (1-r_squared)*(len(y_train)-1)/(len(y_train)-X_train.shape[1]-1)
print('r_squared for train data: ',r_squared, 'and adjusted_r_squared for train data: ',adjusted_r_squared)

yhat = linreg1.predict(X_test)
SS_Residual = sum((y_test-yhat)**2)
SS_Total = sum((y_test-np.mean(y_test))**2)
r_squared = 1 - (float(SS_Residual))/SS_Total
adjusted_r_squared = 1 - (1-r_squared)*(len(y_test)-1)/(len(y_test)-X_test.shape[1]-1)
print('r_squared for test data: ',r_squared, 'and adjusted_r_squared for test data: ',adjusted_r_squared)

